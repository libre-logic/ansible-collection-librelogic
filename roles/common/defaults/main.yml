---

##### DNS RESOLVER #####

# update DNS nameserver settings (resolv.conf) (yes/no)
setup_dns: no

# list of DNS nameservers IP addresses
# Example:
# dns_nameservers:
#   - "1.1.1.1"
#   - "1.0.0.1"
dns_nameservers: []


##### GENERAL #####

# yes/no: update hostname using ansible inventory name
setup_hostname: yes

##### SYSCTL (NETWORKING/MEMORY) #####

# update sysctl settings (yes/no)
setup_sysctl: yes

# Enable/disable packet forwarding between network interfaces (routing) (yes/no)
sysctl_allow_forwarding: no

# answer ICMP pings (yes/no)
sysctl_answer_ping: no

# "swappiness" setting. 100: swap/reclaim RAM aggressively. 0: do not swap unless necessary
sysctl_vm_swappiness: '10'

# "VFS cache pressure" setting. 100+ : prefer caching memory pages over disk cache
sysctl_vm_vfs_cache_pressure: '150'


##### PACKAGE MANAGEMENT #####

# yes/no: setup APT sources (security, backports) and automatic security upgrades
setup_apt: yes

# Debian bug numbers/packages to ignore for apt-listbugs (don't let these bugs block package installation)
apt_listbugs_ignore_list:
  - 909750 # https://bugs.debian.org/909750 - reason: FHS violation, not critical
  - 933001 # https://bugs.debian.org/933001 - reason: plymouth is not installed
  - 933749 # https://bugs.debian.org/933749 - reason: disk space not a problem on most hosts
  - 935042 # https://bugs.debian.org/935042 - reason: skip-upgrade-test=yes set in monitoring role
  - 967010 # https://bugs.debian.org/967010 - reason: not reproducible


##### SSH SERVER #####

# setup/harden SSH server (yes/no)
setup_ssh: yes

# List of public SSH key files to authorize on the server for the ansible user
# Example: ['public_keys/john.pub', 'public_keys/jane.pub']
# Removing a key here does not remove it on the server!
ssh_authorized_keys: []

# a list of public keys that are never accepted by the ssh server
ssh_server_revoked_keys: []

# sshd and SFTP server log levels, respecively (QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, DEBUG3)
ssh_log_level: "INFO"
ssh_sftp_loglevel: "ERROR"

# types of SSH TCP forwarding to allow (no, local, remote, all - QUOTED)
# remote/all is required to use the host as a jumpbox
ssh_allow_tcp_forwarding: "no"

# enable/disable root SSH logins (yes, no - QUOTED)
ssh_permit_root_login: "no"

# enable/disable SSH password authentication (yes, no - QUOTED)
ssh_password_authentication: "no"

# SSH Server allowed Key Exchange alogrithms
# Add other KexAlgortithms here if your clients do not support modern/secure KEX
ssh_kexalgorithms:
  - diffie-hellman-group-exchange-sha256

# SSH Server allowed HMACs (hash alogrithms)
# Add other HMAC alogrithms here if your clients do not support modern/secure HMACs
ssh_hmacs:
  - hmac-sha2-512-etm@openssh.com
  - hmac-sha2-256-etm@openssh.com
  - umac-128-etm@openssh.com
  - hmac-sha2-512
  - hmac-sha2-256

##### FIREWALL #####

# setup firewall (yes/no)
setup_firewall: yes

# alias for LAN addresses (CIDR notation,comma-separated values)
firehol_alias_lan: "10.0.0.0/8,192.168.0.0/16,172.16.0.0/12"

# Firewall rules
firehol_networks:
  - name: "global" # a name for this rule set
    src: "any" # traffic to/from any IP address
    interface: "any" # traffic to/from any network interface
    policy: "RETURN" # policy to apply for traffic that matches no rules (one of DROP/RETURN/ACCEPT/REJECT)
    allow_input: # incoming traffic to allow (name: service name, src: source IP address/subnet)
      - { name: "ssh", src: "any" } # ssh
      - { name: "ping", src: "any" } # incoming ICMP pings
      # - { name: "http", src: "{{ firehol_alias_lan }}" } # web server
      # - { name: "https", src: "{{ firehol_alias_lan }}" } # web server
      # - { name: "netdata", src: "{{ firehol_alias_lan }}" } # monitoring dashboard
    allow_output: # outgoing traffic to allow (name: service name, dst: destination IP address/subnet)
      - { name: "dns", dst: "any" } # domain name resolution
      - { name: "ntp", dst: "any" } # time/date synchronization
      - { name: "dhcp", dst: "{{ firehol_alias_lan }}" } # DHCP requests on LAN
      - { name: "http", dst: "any" } # outgoing HTTP requests
      - { name: "https", dst: "any" } # outgoing HTTPS requests
      - { name: "ping", dst: "any" } # outgoing ICMP pings
      - { name: "submission", dst: "any" } # outgoing mail/port 587
      # - { name: "ssh", dst: "any" } # ssh/git access to anywhere
      # - { name: "all", dst: "any" } # allow ALL outgoing connections


# Router definitions - traffic forwarding between network interfaces
# Example:
# firehol_routers:
#   - name: "docker" # arbitrary name for the router, example for docker
#     allow_route_to: # forward these services from any interface, to the interface specified
#       - { name: "http", to_interface: "docker_gwbridge" }
#       - { name: "https", to_interface: "docker_gwbridge" }
#       - { name: "git", to_interface: "docker_gwbridge" }
#     allow_route_from: # forward these services to any interface, from the interface specified
#       - { name: "any", from_interface: "docker_gwbridge" }
#       - { name: "any", from_interface: "docker0" }
firehol_routers: []

# if docker role is enabled, add relevant firewall/router rules (yes/no):
# - allow traffic from host to containers
# - allow traffic between containers
# - allow all outgoing swarm traffic
# - insert SNAT rules for outgoing swarm traffic
firehol_docker_swarm_compat: yes

# custom services definitions, in addition to https://firehol.org/services/
firehol_custom_services:
  - { name: "git2222", ports: "tcp/2222" } # Git on custom port
  - { name: "netdata", ports: "tcp/19999" } # Netdata monitoring system web interface/API
  - { name: "proxmoxweb", ports: "tcp/8006" } # Proxmox VE web interface
  - { name: "proxmoxcluster", ports: "udp/5405" } # Proxmox VE cluster (corosync)

##### FAIL2BAN #####

# setup fail2ban bruteforce detection/prevention system (yes/no)
setup_fail2ban: yes

# don't auto-ban IP addresses from these networks - 127.0.0.1 is always ignored
fail2ban_ignoreip:
  - '10.0.0.0/8'
  - '192.168.0.0/16'
  - '172.16.0.0/12'

# fail2ban default ban duration (in seconds)
fail2ban_default_bantime: "31536000"
# fail2ban: default interval (in seconds) before counting failures towards a ban
fail2ban_default_findtime: "6000"
# fail2ban default number of failures that have to occur in the last findtime to ban the IP
fail2ban_default_maxretry: 5
# destination email address used for some actions
fail2ban_destemail: "{{ msmtp_admin_email | default('root@localhost') }}"


##### USERS #####

# Additional user accounts to create.
# Supports these user (https://docs.ansible.com/ansible/latest/modules/user_module.html) module parameters:
#   name, password, comment, create_home, home, groups, append, generate_ssh_key, update_password
# Additional supported parameters:
#   ssh_authorized_keys: list of public key files to authorize on this account
#   sudo_nopasswd_commands: list of commands the user should be able to run with sudo without password
# Example:
# linux_users:
#    - name: "remotebackup"
#      password: "{{ vault_linux_users_remotebackup_password }}"
#      groups: [ "ssh", "sudo" ]
#      comment: "limited user account for remote backups"
#      ssh_authorized_keys: []
#      home: "/var/lib/sftp/myusername"
#      sudo_nopasswd_commands: ['/usr/bin/rsync']
linux_users: []

# allow ansible connecting user to run 'sudo rsync' without password (yes/no)
# Required to use the ansible synchronize module, and download files generated by the backup role
ansible_user_allow_sudo_rsync_nopasswd: yes

# yes/no: whether to create a 'remotebackup' user
# This user will accept SSH connections and will be allowed to run 'sudo rsync --server' without password
remote_backup_allowed: yes

# A list of public SSH key files to authorize for the 'remotebackup' user
remote_backup_authorized_keys: []

# A random password and password salt for the remotebackup user
# Unused, but must be set to unlock the account
#remote_backup_password: "CHANGEME"
#remote_backup_salt: "CHANGEME"


##### OUTGOING MAIL #####

# install outgoing system mail client/local MTA (yes/no)
setup_msmtp: no
# SMTP server hostname/port
#msmtp_smtp_host: smtp.CHANGEME.org
msmtp_smtp_port: 587
# enable SMTP authentication (LOGIN) (yes/no)
msmtp_auth_enabled: yes
# SMTP username/password used to authenticate on the smarthost (if msmtp_auth_enabled: yes)
msmtp_smtp_user: "{{ vault_msmtp_smtp_user }}"
msmtp_smtp_password: "{{ vault_msmtp_smtp_password }}"
# Mail address to send all local mail to
msmtp_admin_email: "{{ vault_msmtp_admin_email | default('root') }}"
# yes/no: enable STARTTLS connection to the SMTP server
msmtp_tls_enabled: yes
# yes/no: enforce checking for valid server TLS certificates
msmtp_tls_certcheck: yes
# (optional) Fingerprint for the TLS certificate of the SMTP server
# if msmtp_tls_certcheck is enabled and the server certificate is not trusted (eg. self-signed certificate),
# set this value to the exact fingerprint of the server certificate
# You can get it by running: msmtp --serverinfo --tls --tls-certcheck=off
#msmtp_smtp_host_tls_fingerprint: '11:22:33:44:55:66:77:88:99:00:13:37:AA:BB:CC:DD:EE:FF:AD:C2'


##### PACKAGES #####

# install a basic set of interactive command-line diagnostic/file manipulation/shell utilities (yes/no)
# see tasks/50utilities.yml for the full list
setup_cli_utils: yes

# install haveged entropy generator (yes/no)
# good to have on virtual machines where system is frequently running out of entropy
setup_haveged: yes


##### CA CERTIFICATES #####

# yes/no: install extra CA certificates to the OS trust store
# place certificate files in a `certificates/` directory at the root of the playbook, named `*.crt`
install_ca_certificates: no

# yes/no: add the proxmox 'no-subscription' APT repository to sources.list
apt_add_proxmox_repository: no
