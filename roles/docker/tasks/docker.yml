---

- name: Ensure old versions of Docker are not installed.
  apt:
    package:
      - docker
      - docker-engine
    state: absent

- name: set gnupg package name for Debian 9
  set_fact:
   gpg_package: "gnupg"
  when: (ansible_distribution == 'Debian' and ansible_distribution_release == 'stretch')

- name: set gnupg package name for Debian 10/Ubuntu
  set_fact:
   gpg_package: "gpg"
  when: ansible_distribution == 'Ubuntu' or (ansible_distribution == 'Debian' and ansible_distribution_release == 'buster')

- name: Ensure dependencies are installed.
  apt:
    state: present
    update_cache: yes
    cache_valid_time: 900
    package:
      - apt-transport-https
      - ca-certificates
      - "{{ gpg_package }}" # required for APT key import
      - pass # required for docker registry login

- name: Add Docker apt key.
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present
  register: add_repository_key

- name: Add Docker repository.
  apt_repository:
    repo: "{{ docker_apt_repository }}"
    state: present
    update_cache: yes

- name: create docker configuration directory
  file:
    path: "/etc/docker"
    state: directory
    mode: 0755

- name: copy docker daemon configuration
  template:
    src: etc_docker_daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: 0644
  notify: restart docker

- name: Install Docker.
  package:
    name: "{{ docker_package }}"
    state: "{{ docker_package_state }}"
  notify: restart docker
  when: not ansible_check_mode

# On Ubuntu or Debian Buster
- name: Install python-docker and docker-compose
  package:
    name:
      - python-docker
      - python3-docker
      - docker-compose
    state: present
  when:
    - ansible_distribution == 'Ubuntu' or (ansible_distribution == 'Debian' and ansible_distribution_release == 'buster')
    - not ansible_check_mode

# On Debian 9 (Stretch) only
# We need python-docker > 1.10.0 to use docker_volume module
# So we install it from stretch-backports
- name: Install python-docker and docker-compose
  package:
    name:
      - python-docker
      - python3-docker
      - docker-compose
    default_release: stretch-backports
    state: present
  when:
    - ansible_distribution == 'Debian'
    - ansible_distribution_release == 'stretch'
    - not ansible_check_mode

- name: Ensure docker users are added to the docker group.
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  with_items: "{{ docker_users }}"
  when: not ansible_check_mode

##### DOCKER STACK #####

# required for pip module installation
- name: install python3-pip
  apt:
    package:
      - python3-pip
      - python3-setuptools
    state: present

# required for docker stack, no debian packages for these modules
- name: install python requirements for docker_stack module
  pip:
    name:
      - "jsondiff"
      - "pyyaml"
    state: present

# on Ubuntu 18 the python-docker package provided by the OS is too old
# ansible 2.9 docker modules needs python3-docker >=2.6.0
- name: install python requirements for docker modules
  pip:
    name: docker==4.2.0
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version == '18'

##### SERVICE #####

- name: enable docker service
  service: name=docker state=started enabled=yes
  when:
    - docker_enable_service|bool
    - not ansible_check_mode

- name: disable docker service
  service: name=docker state=stopped enabled=no
  when:
    - not docker_enable_service|bool
    - not ansible_check_mode

# run all handlers now, so that they are executed even if the 'git clone' task in docker-builder.yml fails due to a missing deploy key
- name: force all notified handlers to run now
  meta: flush_handlers

##### DOCKER SWARM #####

- name: initialize a docker swarm
  docker_swarm:
    state: present
  register: docker_swarm
  when:
    - docker_swarm_join_method == 'init'
    - docker_swarm_advertise_interface is not defined

- name: initialize a docker swarm on specific interface
  docker_swarm:
    state: present
    advertise_addr: "{{ docker_swarm_advertise_interface }}"
  register: docker_swarm
  when:
    - docker_swarm_join_method == 'init'
    - docker_swarm_advertise_interface is defined

- name: join an existing docker swarm
  docker_swarm:
    state: join
    join_token: docker_swarm.swarm_facts.JoinTokens.Manager
  when: docker_swarm_join_method == 'join'

- name: apply docker swarm node_labels
  docker_node:
    hostname: "{{ inventory_hostname }}"
    labels: "{{ docker_swarm_node_labels }}"
