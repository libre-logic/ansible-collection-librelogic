- name: Ensure old versions of Docker are not installed.
  apt:
    package:
      - docker
      - docker-engine
    state: absent

- name: set gnupg package name for Debian 9
  set_fact:
   gpg_package: "gnupg"
  when: (ansible_distribution == 'Debian' and ansible_distribution_release == 'stretch')

- name: set gnupg package name for Debian 10/Ubuntu
  set_fact:
   gpg_package: "gpg"
  when: ansible_distribution == 'Ubuntu' or (ansible_distribution == 'Debian' and ansible_distribution_release in ['buster', 'bullseye'])

- name: Ensure dependencies are installed.
  apt:
    state: present
    package:
      - apt-transport-https
      - ca-certificates
      - "{{ gpg_package }}" # required for APT key import
      - pass # required for docker registry login

- name: add Docker apt key
  apt_key:
    url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present
  register: add_repository_key

- name: add Docker repository
  apt_repository:
    repo: "deb [arch={{ docker_apt_arch }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}" # noqa 204
    state: present
    filename: docker
    update_cache: yes

- name: create docker configuration directory
  file:
    path: "/etc/docker"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: copy docker daemon configuration
  template:
    src: etc_docker_daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"

- name: install docker
  package:
    name: "docker-ce"
    state: "present"
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"

- name: install docker_stack module requirements and docker-compose
  package:
    name:
      - python3-docker
      - python3-jsondiff
      - python3-docker
      - python3-pip
      - python3-yaml
      - docker-compose
    state: present
  when: ansible_distribution == 'Ubuntu' or (ansible_distribution == 'Debian' and ansible_distribution_release in ['buster', 'bullseye'])
  ignore_errors: "{{ ansible_check_mode }}"

# On Debian 9 install python-docker > 1.10.0 from stretch-backports (required for docker_volume module)
- name: Install python-docker and docker-compose
  package:
    name:
      - python3-pip
      - python3-setuptools
      - python-docker
      - python3-docker
      - docker-compose
    default_release: stretch-backports
    state: present
  when:
    - ansible_distribution == 'Debian'
    - ansible_distribution_release == 'stretch'
  ignore_errors: "{{ ansible_check_mode }}"

- name: install python requirements for docker_stack module (Debian 9, no deb packages for these modules)
  pip:
    name:
      - "jsondiff"
      - "pyyaml"
    state: present
  when:
    - ansible_distribution == 'Debian'
    - ansible_distribution_release == 'stretch'
  ignore_errors: "{{ ansible_check_mode }}"

# on Ubuntu 18 the python-docker package provided by the OS is too old, ansible 2.9 docker modules needs python3-docker >=2.6.0
- name: install python requirements for docker modules
  pip:
    name: docker==4.2.0
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version == '18'


- name: Ensure docker users are added to the docker group.
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  with_items: "{{ docker_users }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: enable/disable nightly cleanup of unused docker data
  cron:
    user: root
    cron_file: docker-system-prune-all
    name: "cleanup unused docker data"
    minute: "30"
    hour: "23"
    day: "*"
    job: docker system prune --all --force | logger -t docker-system-prune-all
    disabled: "{{ False if docker_prune_nightly else True }}"

- name: force all notified handlers to run now
  meta: flush_handlers

##### SWARM #####

- name: configure docker swarm
  docker_swarm: "{{ docker_swarm }}"


- name: apply docker swarm node_labels
  docker_node:
    hostname: "{{ inventory_hostname }}"
    labels: "{{ docker_swarm_node_labels }}"
  ignore_errors: "{{ ansible_check_mode }}"

##### SERVICE #####

- name: start/stop/enable/disable docker service
  service:
    name: docker
    state: "{{ 'started' if docker_enable_service else 'stopped' }}"
    enabled: "{{ 'yes' if docker_enable_service else 'no' }}"
  tags: services
